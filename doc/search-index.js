var N = null;var searchIndex = {};
searchIndex["tower"]={"doc":"Tower is a library of modular and reusable components for…","items":[],"paths":[]};
searchIndex["tower_balance"]={"doc":"","items":[[3,"Balance","tower_balance","Balances requests across a set of inner services.",N,N],[3,"ResponseFuture","","",N,N],[0,"choose","","",N,N],[3,"PowerOfTwoChoices","tower_balance::choose","Chooses nodes using the [Power of Two Choices][p2c].",N,N],[3,"RoundRobin","","Chooses nodes sequentially.",N,N],[3,"TooFew","","Indicates that there were not at least two services.",N,N],[3,"Replicas","","Holds two or more services.",N,N],[11,"new","","",0,[[["smallrng"]],["self"]]],[8,"Choose","","A strategy for choosing nodes.",N,N],[10,"choose","","Returns the index of a replica to be used next.",1,[[["self"],["replicas"]],["usize"]]],[11,"len","","",2,[[["self"]],["usize"]]],[0,"error","tower_balance","",N,N],[3,"Balance","tower_balance::error","",N,N],[0,"load","tower_balance","",N,N],[3,"Constant","tower_balance::load","Wraps a type so that `Load::load` returns a constant value.",N,N],[3,"InstrumentFuture","","Attaches a `I`-typed instruments to the result of an…",N,N],[3,"NoInstrument","","A `Instrument` implementation that drops each instrument…",N,N],[11,"new","","",3,[[["t"],["m"]],["self"]]],[11,"new","","",4,[[["i"],["h"],["f"]],["self"]]],[0,"peak_ewma","","",N,N],[3,"PeakEwma","tower_balance::load::peak_ewma","Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,"WithPeakEwma","","Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost","","Represents the relative cost of communicating with a…",N,N],[3,"Handle","","Updates `RttEstimate` when dropped.",N,N],[11,"new","","Wraps a `D`-typed `Discover` so that services have a…",5,[[["d"],["duration"],["duration"],["i"]],["self"]]],[0,"pending_requests","tower_balance::load","",N,N],[3,"PendingRequests","tower_balance::load::pending_requests","Expresses load based on the number of currently-pending…",N,N],[3,"WithPendingRequests","","Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count","","Represents the number of currently-pending requests to a…",N,N],[3,"Handle","","",N,N],[11,"new","","",6,[[["d"],["i"]],["self"]]],[8,"Instrument","tower_balance::load","Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output","","",7,N],[10,"instrument","","Attaches an `H`-typed handle to a `V`-typed value.",7,N],[8,"Load","","Exposes a load metric.",N,N],[16,"Metric","","",8,N],[10,"load","","",8,N],[0,"pool","tower_balance","This module defines a load-balanced pool of services that…",N,N],[3,"PoolDiscoverer","tower_balance::pool","A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder","","A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool","","A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new","","Create a new builder with default values for all load…",9,[[],["self"]]],[11,"underutilized_below","","When the estimated load (see the module-level docs) drops…",9,[[["self"],["f64"]],["self"]]],[11,"loaded_above","","When the estimated load (see the module-level docs)…",9,[[["self"],["f64"]],["self"]]],[11,"initial","","The initial estimated load average.",9,[[["self"],["f64"]],["self"]]],[11,"urgency","","How aggressively the estimated load average is updated.",9,[[["self"],["f64"]],["self"]]],[11,"build","","See [`Pool::new`].",9,[[["self"],["ms"],["target"],["c"]],["pool"]]],[11,"new","","Construct a new dynamically sized `Pool`.",10,[[["ms"],["target"],["c"]],["self"]]],[11,"p2c","tower_balance","Chooses services using the [Power of Two Choices][p2c].",11,[[["d"]],["self"]]],[11,"p2c_with_rng","","Initializes a P2C load balancer from the provided…",11,[[["d"],["r"]],["result",["error"]]]],[11,"round_robin","","Attempts to choose services sequentially.",11,[[["d"]],["self"]]],[11,"new","","Creates a new balancer.",11,[[["d"],["c"]],["self"]]],[11,"is_ready","","Returns true iff there are ready services.",11,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns true iff there are no ready services.",11,[[["self"]],["bool"]]],[11,"num_ready","","Counts the number of services considered to be ready.",11,[[["self"]],["usize"]]],[11,"num_not_ready","","Counts the number of services not considered to be ready.",11,[[["self"]],["usize"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"make_connection","","",11,N],[11,"poll_ready","","",11,[[["self"]],["result",["async"]]]],[11,"make_service","","",11,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_future","","",12,[[["self"]],["f"]]],[11,"from","tower_balance::choose","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","tower_balance::error","",15,[[["self"]],["string"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","tower_balance::load","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"make_connection","","",3,N],[11,"poll_ready","","",3,[[["self"]],["result",["async"]]]],[11,"make_service","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","tower_balance::load::peak_ewma","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"make_connection","","",17,N],[11,"poll_ready","","",17,[[["self"]],["result",["async"]]]],[11,"make_service","","",17,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","tower_balance::load::pending_requests","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"make_connection","","",20,N],[11,"poll_ready","","",20,[[["self"]],["result",["async"]]]],[11,"make_service","","",20,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"equivalent","","",21,[[["self"],["k"]],["bool"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","tower_balance::pool","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"make_connection","","",10,N],[11,"poll_ready","","",10,[[["self"]],["result",["async"]]]],[11,"make_service","","",10,N],[11,"choose","tower_balance::choose","Chooses two distinct nodes at random and compares their…",0,[[["self"],["replicas"]],["usize"]]],[11,"choose","","",13,[[["self"],["replicas"]],["usize"]]],[11,"instrument","tower_balance::load","",16,[[["self"],["h"],["v"]],["v"]]],[11,"load","","",3,[[["self"]],["m"]]],[11,"load","tower_balance::load::peak_ewma","",17,N],[11,"load","tower_balance::load::pending_requests","",20,[[["self"]],["count"]]],[11,"eq","tower_balance::load::peak_ewma","",18,[[["self"],["cost"]],["bool"]]],[11,"ne","","",18,[[["self"],["cost"]],["bool"]]],[11,"eq","tower_balance::load::pending_requests","",21,[[["self"],["count"]],["bool"]]],[11,"ne","","",21,[[["self"],["count"]],["bool"]]],[11,"default","tower_balance::choose","",0,[[],["self"]]],[11,"default","","",13,[[],["roundrobin"]]],[11,"default","tower_balance::load::pending_requests","",21,[[],["count"]]],[11,"default","tower_balance::pool","",9,[[],["self"]]],[11,"cmp","tower_balance::load::pending_requests","",21,[[["self"],["count"]],["ordering"]]],[11,"clone","tower_balance::choose","",14,[[["self"]],["toofew"]]],[11,"clone","tower_balance::load","",16,[[["self"]],["noinstrument"]]],[11,"clone","tower_balance::load::peak_ewma","",18,[[["self"]],["cost"]]],[11,"clone","tower_balance::load::pending_requests","",21,[[["self"]],["count"]]],[11,"clone","tower_balance::pool","",9,[[["self"]],["builder"]]],[11,"drop","tower_balance::load::peak_ewma","",19,[[["self"]]]],[11,"partial_cmp","","",18,[[["self"],["cost"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["cost"]],["bool"]]],[11,"le","","",18,[[["self"],["cost"]],["bool"]]],[11,"gt","","",18,[[["self"],["cost"]],["bool"]]],[11,"ge","","",18,[[["self"],["cost"]],["bool"]]],[11,"partial_cmp","tower_balance::load::pending_requests","",21,[[["self"],["count"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["count"]],["bool"]]],[11,"le","","",21,[[["self"],["count"]],["bool"]]],[11,"gt","","",21,[[["self"],["count"]],["bool"]]],[11,"ge","","",21,[[["self"],["count"]],["bool"]]],[11,"fmt","tower_balance::choose","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::error","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::load","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::load::peak_ewma","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::load::pending_requests","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::pool","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::error","",15,[[["self"],["formatter"]],["result"]]],[11,"index","tower_balance::choose","",2,N],[11,"source","tower_balance::error","",15,[[["self"]],["option",["error"]]]],[11,"poll","tower_balance::load","",4,[[["self"]],["poll"]]],[11,"poll","tower_balance","",12,[[["self"]],["poll"]]],[11,"poll","tower_balance::load","Yields the next discovery change set.",3,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance::load::peak_ewma","",5,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance::load::pending_requests","Yields the next discovery change set.",6,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance::pool","",23,[[["self"]],["poll",["change"]]]],[11,"poll_ready","tower_balance::load","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"poll_ready","tower_balance::load::peak_ewma","",17,[[["self"]],["poll"]]],[11,"call","","",17,N],[11,"poll_ready","tower_balance::load::pending_requests","",20,[[["self"]],["poll"]]],[11,"call","","",20,N],[11,"poll_ready","tower_balance::pool","",10,[[["self"]],["poll"]]],[11,"call","","",10,N],[11,"poll_ready","tower_balance","Prepares the balancer to process a request.",11,[[["self"]],["poll"]]],[11,"call","","",11,N]],"paths":[[3,"PowerOfTwoChoices"],[8,"Choose"],[3,"Replicas"],[3,"Constant"],[3,"InstrumentFuture"],[3,"WithPeakEwma"],[3,"WithPendingRequests"],[8,"Instrument"],[8,"Load"],[3,"Builder"],[3,"Pool"],[3,"Balance"],[3,"ResponseFuture"],[3,"RoundRobin"],[3,"TooFew"],[3,"Balance"],[3,"NoInstrument"],[3,"PeakEwma"],[3,"Cost"],[3,"Handle"],[3,"PendingRequests"],[3,"Count"],[3,"Handle"],[3,"PoolDiscoverer"]]};
searchIndex["tower_buffer"]={"doc":"Buffer requests when the inner service is out of capacity.","items":[[3,"Buffer","tower_buffer","Adds a buffer in front of an inner service.",N,N],[3,"BufferLayer","","Buffer requests with a bounded buffer",N,N],[0,"error","","Error types",N,N],[3,"ServiceError","tower_buffer::error","An error produced by a `Service` wrapped by a `Buffer`",N,N],[3,"Closed","","An error when the buffer's worker closes unexpectedly.",N,N],[3,"SpawnError","","Error produced when spawning the worker fails",N,N],[0,"future","tower_buffer","Future types",N,N],[3,"ResponseFuture","tower_buffer::future","Future eventually completed with the response to the…",N,N],[8,"WorkerExecutor","tower_buffer","This trait allows you to use either Tokio's threaded…",N,N],[11,"new","","",0,[[["usize"]],["self"]]],[11,"with_executor","","",0,[[["usize"],["e"]],["self"]]],[11,"new","","Creates a new `Buffer` wrapping `service`.",1,[[["t"],["usize"]],["result",["spawnerror"]]]],[11,"with_executor","","Creates a new `Buffer` wrapping `service`.",1,[[["t"],["usize"],["e"]],["result",["spawnerror"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","tower_buffer::error","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tower_buffer::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"clone","tower_buffer","",1,[[["self"]],["self"]]],[11,"fmt","tower_buffer::error","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"source","","",2,[[["self"]],["option",["error"]]]],[11,"source","","",4,[[["self"]],["option",["error"]]]],[11,"poll","tower_buffer::future","",5,[[["self"]],["poll"]]],[11,"layer","tower_buffer","",0,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N]],"paths":[[3,"BufferLayer"],[3,"Buffer"],[3,"ServiceError"],[3,"Closed"],[3,"SpawnError"],[3,"ResponseFuture"]]};
searchIndex["tower_discover"]={"doc":"Tower service discovery","items":[[3,"List","tower_discover","Static service discovery based on a predetermined list of…",N,N],[3,"Services","","Dynamic service discovery based on a stream of service…",N,N],[4,"Change","","A change in the service set",N,N],[13,"Insert","","",0,N],[13,"Remove","","",0,N],[8,"Discover","","Provide a uniform set of services able to satisfy a request.",N,N],[16,"Key","","NewService key",1,N],[16,"Service","","",1,N],[16,"Error","","Error produced during discovery",1,N],[10,"poll","","Yields the next discovery change set.",1,[[["self"]],["poll",["change"]]]],[11,"new","","",2,[[["t"]],["list"]]],[11,"new","","",3,[[["s"]],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"poll","","",2,[[["self"]],["poll",["change"]]]],[11,"poll","","",3,[[["self"]],["poll",["change"]]]]],"paths":[[4,"Change"],[8,"Discover"],[3,"List"],[3,"Services"]]};
searchIndex["tower_filter"]={"doc":"Conditionally dispatch requests to the inner service based…","items":[[3,"FilterLayer","tower_filter","",N,N],[3,"Filter","","",N,N],[0,"error","","Error types",N,N],[3,"Error","tower_filter::error","Error produced by `Filter`",N,N],[11,"rejected","","Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner","","Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,"future","tower_filter","Future types",N,N],[3,"ResponseFuture","tower_filter::future","Filtered response future",N,N],[11,"new","tower_filter","",1,[[["u"]],["self"]]],[8,"Predicate","","Checks a request",N,N],[16,"Future","","",2,N],[10,"check","","",2,N],[11,"new","","",3,[[["t"],["u"]],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","tower_filter::error","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tower_filter::future","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"fmt","tower_filter::error","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter::future","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter::error","",0,[[["self"],["formatter"]],["result"]]],[11,"source","","",0,[[["self"]],["option",["error"]]]],[11,"poll","tower_filter::future","",4,[[["self"]],["poll"]]],[11,"layer","tower_filter","",1,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",3,[[["self"]],["poll"]]],[11,"call","","",3,N]],"paths":[[3,"Error"],[3,"FilterLayer"],[8,"Predicate"],[3,"Filter"],[3,"ResponseFuture"]]};
searchIndex["tower_in_flight_limit"]={"doc":"Tower middleware that limits the maximum number of…","items":[[3,"InFlightLimitLayer","tower_in_flight_limit","",N,N],[3,"InFlightLimit","","",N,N],[0,"future","","",N,N],[3,"ResponseFuture","tower_in_flight_limit::future","",N,N],[11,"new","tower_in_flight_limit","",0,[[["usize"]],["self"]]],[11,"new","","Create a new rate limiter",1,[[["t"],["usize"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",1,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",1,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",1,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tower_in_flight_limit::future","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"clone","tower_in_flight_limit","",0,[[["self"]],["inflightlimitlayer"]]],[11,"clone","","",1,[[["self"]],["inflightlimit"]]],[11,"drop","tower_in_flight_limit::future","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_in_flight_limit","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_in_flight_limit::future","",2,[[["self"]],["poll"]]],[11,"layer","tower_in_flight_limit","",0,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N]],"paths":[[3,"InFlightLimitLayer"],[3,"InFlightLimit"],[3,"ResponseFuture"]]};
searchIndex["tower_layer"]={"doc":"Layer traits and extensions.","items":[[0,"util","tower_layer","Types and utilities for working with `Layer`.",N,N],[3,"Chain","tower_layer::util","Two middlewares chained together.",N,N],[4,"ChainError","","Error's produced when chaining two layers together",N,N],[13,"Inner","","Error produced from the inner layer call",0,N],[13,"Outer","","Error produced from the outer layer call",0,N],[11,"new","","Create a new `Chain`.",1,[[["inner"],["outer"]],["self"]]],[8,"LayerExt","","An extension trait for `Layer`'s that provides a variety…",N,N],[11,"chain","","Return a new `Layer` instance that applies both `self` and…",2,[[["self"],["t"]],["chain"]]],[8,"Layer","tower_layer","Decorates a `Service`, transforming either the request or…",N,N],[16,"Response","","The wrapped service response type",3,N],[16,"Error","","The wrapped service's error type",3,N],[16,"LayerError","","The error produced when calling `layer`",3,N],[16,"Service","","The wrapped service",3,N],[10,"layer","","Wrap the given service with the middleware, returning a…",3,[[["self"],["s"]],["result"]]],[11,"from","tower_layer::util","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"layer","","",1,[[["self"],["s"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"ChainError"],[3,"Chain"],[8,"LayerExt"],[8,"Layer"]]};
searchIndex["tower_mock"]={"doc":"Mock `Service` that can be used in tests.","items":[[3,"Mock","tower_mock","A mock service",N,N],[3,"Handle","","Handle to the `Mock`.",N,N],[3,"Request","","",N,N],[3,"Respond","","Respond to a request received by `Mock`.",N,N],[0,"error","","Error types",N,N],[3,"Closed","tower_mock::error","",N,N],[0,"future","tower_mock","Future types",N,N],[3,"ResponseFuture","tower_mock::future","Future of the `Mock` response.",N,N],[11,"new","tower_mock","Create a new `Mock` and `Handle` pair.",0,N],[11,"poll_request","","Asynchronously gets the next request",1,[[["self"]],["poll",["option","box"]]]],[11,"next_request","","Synchronously gets the next request.",1,[[["self"]],["option",["request"]]]],[11,"allow","","Allow a certain number of requests",1,[[["self"],["u64"]]]],[11,"error","","Make the next poll_ method error with the given error.",1,[[["self"],["e"]]]],[11,"into_parts","","Split the request and respond handle",2,N],[11,"respond","","",2,[[["self"],["u"]]]],[11,"error","","",2,[[["self"],["e"]]]],[11,"respond","","",3,[[["self"],["t"]]]],[11,"error","","",3,[[["self"],["e"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","tower_mock::error","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tower_mock::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"clone","tower_mock","",0,[[["self"]],["self"]]],[11,"drop","","",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","tower_mock::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_mock::future","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_mock","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_mock::error","",4,[[["self"],["formatter"]],["result"]]],[11,"deref","tower_mock","",2,[[["self"]],["t"]]],[11,"poll","tower_mock::future","",5,[[["self"]],["poll"]]],[11,"poll_ready","tower_mock","",0,[[["self"]],["poll"]]],[11,"call","","",0,N]],"paths":[[3,"Mock"],[3,"Handle"],[3,"Request"],[3,"Respond"],[3,"Closed"],[3,"ResponseFuture"]]};
searchIndex["tower_rate_limit"]={"doc":"A Tower middleware that rate limits the requests that are…","items":[[3,"RateLimit","tower_rate_limit","",N,N],[3,"RateLimitLayer","","",N,N],[3,"Rate","","",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","The request has been rate limited",N,N],[13,"RateLimit","","",0,N],[13,"Upstream","","",0,N],[11,"new","","",1,[[["u64"],["duration"]],["self"]]],[11,"new","","Create a new rate limiter",2,[[["t"],["rate"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",2,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",2,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",2,[[["self"]],["t"]]],[11,"new","","Create a new rate",3,[[["u64"],["duration"]],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",3,[[["self"]],["rate"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"layer","","",1,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N]],"paths":[[4,"Error"],[3,"RateLimitLayer"],[3,"RateLimit"],[3,"Rate"],[3,"ResponseFuture"]]};
searchIndex["tower_reconnect"]={"doc":"","items":[[3,"Reconnect","tower_reconnect","",N,N],[0,"future","","",N,N],[3,"ResponseFuture","tower_reconnect::future","",N,N],[11,"new","tower_reconnect","",0,[[["m"],["target"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"make_connection","","",0,N],[11,"poll_ready","","",0,[[["self"]],["result",["async"]]]],[11,"make_service","","",0,N],[11,"from","tower_reconnect::future","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into_future","","",1,[[["self"]],["f"]]],[11,"fmt","tower_reconnect","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_reconnect::future","",1,[[["self"]],["poll"]]],[11,"poll_ready","tower_reconnect","",0,[[["self"]],["poll"]]],[11,"call","","",0,N]],"paths":[[3,"Reconnect"],[3,"ResponseFuture"]]};
searchIndex["tower_retry"]={"doc":"Tower middleware for retrying \"failed\" requests.","items":[[3,"Retry","tower_retry","Configure retrying requests of \"failed\" responses.",N,N],[3,"RetryLayer","","Retry requests based on a policy",N,N],[3,"ResponseFuture","","The `Future` returned by a `Retry` service.",N,N],[0,"budget","","A retry \"budget\" for allowing only a certain amount of…",N,N],[3,"Budget","tower_retry::budget","Represents a \"budget\" for retrying requests.",N,N],[3,"Overdrawn","","Indicates that it is not currently allowed to \"withdraw\"…",N,N],[11,"new","","Create a `Budget` that allows for a certain percent of the…",0,[[["duration"],["u32"],["f32"]],["self"]]],[11,"deposit","","Store a \"deposit\" in the budget, which will be used to…",0,[[["self"]]]],[11,"withdraw","","Check whether there is enough \"balance\" in the budget to…",0,[[["self"]],["result",["overdrawn"]]]],[8,"Policy","tower_retry","A \"retry policy\" to classify if a request should be retried.",N,N],[16,"Future","","The `Future` type returned by `Policy::retry()`.",1,N],[10,"retry","","Check the policy if a certain request should be retried.",1,[[["self"],["req"],["result"]],["option"]]],[10,"clone_request","","Tries to clone a request before being passed to the inner…",1,[[["self"],["req"]],["option"]]],[11,"new","","Create a new `RetryLayer` from a retry policy",2,[[["p"]],["self"]]],[11,"new","","Retry the inner service depending on this…",3,[[["p"],["s"]],["self"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","tower_retry::budget","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"default","","",0,[[],["budget"]]],[11,"clone","tower_retry","",3,[[["self"]],["retry"]]],[11,"fmt","tower_retry::budget","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_retry","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"layer","","",2,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",3,[[["self"]],["poll"]]],[11,"call","","",3,N]],"paths":[[3,"Budget"],[8,"Policy"],[3,"RetryLayer"],[3,"Retry"],[3,"ResponseFuture"],[3,"Overdrawn"]]};
searchIndex["tower_service"]={"doc":"Definition of the core `Service` trait to Tower","items":[[8,"Service","tower_service","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Response","","Responses given by the service.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[10,"poll_ready","","Returns `Ready` when the service is able to process…",0,[[["self"]],["poll"]]],[10,"call","","Process the request and return the response asynchronously.",0,N]],"paths":[[8,"Service"]]};
searchIndex["tower_timeout"]={"doc":"Tower middleware that applies a timeout to requests.","items":[[3,"Timeout","tower_timeout","Applies a timeout to requests.",N,N],[3,"TimeoutLayer","","Applies a timeout to requests via the supplied inner…",N,N],[3,"ResponseFuture","","`Timeout` response future",N,N],[0,"error","","Timeout error types",N,N],[3,"Elapsed","tower_timeout::error","The timeout elapsed.",N,N],[11,"new","tower_timeout","Create a timeout from a duration",0,[[["duration"]],["self"]]],[11,"new","","Creates a new Timeout",1,[[["t"],["duration"]],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"to_string","tower_timeout::error","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"clone","tower_timeout","",1,[[["self"]],["timeout"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout::error","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_timeout","",2,[[["self"]],["poll"]]],[11,"layer","","",0,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N]],"paths":[[3,"TimeoutLayer"],[3,"Timeout"],[3,"ResponseFuture"],[3,"Elapsed"]]};
searchIndex["tower_util"]={"doc":"Various utility types and functions that are generally…","items":[[3,"ServiceFn","tower_util","A `Service` implemented by a closure.",N,N],[0,"boxed","","Trait object `Service` instances",N,N],[3,"BoxService","tower_util::boxed","A boxed `Service + Send` trait object.",N,N],[3,"UnsyncBoxService","","A boxed `Service` trait object.",N,N],[6,"BoxFuture","","A boxed `Future + Send` trait object.",N,N],[6,"UnsyncBoxFuture","","A boxed `Future` trait object.",N,N],[11,"new","","",0,[[["s"]],["self"]]],[11,"new","","",1,[[["s"]],["self"]]],[0,"either","tower_util","Contains `EitherService` and related types and functions.",N,N],[4,"EitherService","tower_util::either","Combine two different service types into a single type.",N,N],[13,"A","","",2,N],[13,"B","","",2,N],[0,"ext","tower_util","Combinators for working with `Service`s",N,N],[3,"AndThen","tower_util::ext","Service for the `and_then` combinator, chaining a…",N,N],[3,"Apply","","`Apply` service combinator",N,N],[3,"CallAll","","This is a `futures::Stream` of responses resulting from…",N,N],[3,"FromErr","","Service for the `from_err` combinator, changing the error…",N,N],[3,"Map","","Service for the `map` combinator, changing the type of a…",N,N],[3,"MapErr","","Service for the `map_err` combinator, changing the type of…",N,N],[3,"Oneshot","","A `Future` consuming a `Service` and request, waiting…",N,N],[3,"Ready","","Future yielding a `Service` once the service is ready to…",N,N],[3,"Then","","Service for the `then` combinator, chaining a computation…",N,N],[11,"new","","Create new `AndThen` combinator",3,[[["a"],["b"]],["andthen"]]],[11,"new","","Create new `CallAll` combinator.",4,[[["svc"],["s"]],["callall"]]],[11,"into_inner","","Extract the wrapped `Service`.",4,[[["self"]],["svc"]]],[11,"new","","Create new `Map` combinator",5,[[["t"],["f"]],["self"]]],[11,"new","","Create new `MapErr` combinator",6,[[["t"],["f"]],["self"]]],[11,"new","","Create new `Then` combinator",7,[[["a"],["b"]],["then"]]],[8,"ServiceExt","","An extension trait for `Service`s that provides a variety…",N,N],[11,"ready","","A future yielding the service when it is ready to accept a…",8,[[["self"]],["ready"]]],[11,"apply","","",8,[[["self"],["f"]],["apply"]]],[11,"and_then","","Call another service after call to this one has resolved…",8,[[["self"],["b"]],["andthen"]]],[11,"from_err","","Map this service's error to any error implementing `From`…",8,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a call to the service…",8,[[["self"],["b"]],["then"]]],[11,"map","","Map this service's output to a different type, returning a…",8,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this service's error to a different error, returning a…",8,[[["self"],["f"]],["maperr"]]],[11,"oneshot","","Consume this `Service`, calling with the providing request…",8,[[["self"],["request"]],["oneshot"]]],[11,"call_all","","Process all requests from the given `Stream`, and produce…",8,[[["self"],["s"]],["callall"]]],[0,"option","tower_util","Contains `OptionService` and related types and functions.",N,N],[3,"OptionService","tower_util::option","Optionally forwards requests to an inner service.",N,N],[3,"ResponseFuture","","Response future returned by `OptionService`.",N,N],[4,"Error","","Error produced by `OptionService` responding to a request.",N,N],[13,"Inner","","",9,N],[13,"None","","",9,N],[11,"some","","Returns an `OptionService` that forwards requests to…",10,[[["t"]],["self"]]],[11,"none","","Returns an `OptionService` that responds to all requests…",10,[[],["self"]]],[11,"new","tower_util","Returns a new `NewServiceFn` with the given closure.",11,[[["t"]],["self"]]],[8,"MakeConnection","","The MakeConnection trait is used to create transports",N,N],[16,"Response","","The transport provided by this service",12,N],[16,"Error","","Errors produced by the connecting service",12,N],[16,"Future","","The future that eventually produces the transport",12,N],[10,"make_connection","","Connect and return a transport asynchronously",12,N],[8,"MakeService","","Creates new `Service` values.",N,N],[16,"Response","","Responses given by the service",13,N],[16,"Error","","Errors produced by the service",13,N],[16,"Service","","The `Service` value created by this factory",13,N],[16,"MakeError","","Errors produced while building a service.",13,N],[16,"Future","","The future of the `Service` instance.",13,N],[10,"poll_ready","","Returns `Ready` when the factory is able to process create…",13,[[["self"]],["poll"]]],[10,"make_service","","Create and return a new service value asynchronously.",13,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","tower_util::boxed","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tower_util::either","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_util::ext","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into_future","","",16,[[["self"]],["f"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into_future","","",17,[[["self"]],["f"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","tower_util::option","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_future","","",18,[[["self"]],["f"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"clone","tower_util::ext","",3,[[["self"]],["andthen"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"fmt","tower_util::boxed","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::ext","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::option","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_util::ext","",16,[[["self"]],["poll"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"poll","tower_util::option","",18,[[["self"]],["poll"]]],[11,"poll","tower_util::ext","",4,[[["self"]],["poll",["option"]]]],[11,"poll_ready","tower_util::boxed","",0,[[["self"]],["poll"]]],[11,"call","","",0,[[["self"],["t"]],["boxfuture"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,[[["self"],["t"]],["unsyncboxfuture"]]],[11,"poll_ready","tower_util::either","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[11,"poll_ready","tower_util::ext","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"poll_ready","","",14,[[["self"]],["poll"]]],[11,"call","","",14,N],[11,"poll_ready","","",15,[[["self"]],["poll"]]],[11,"call","","",15,N],[11,"poll_ready","","",5,[[["self"]],["poll"]]],[11,"call","","",5,N],[11,"poll_ready","","",6,[[["self"]],["poll"]]],[11,"call","","",6,N],[11,"poll_ready","","",7,[[["self"]],["poll"]]],[11,"call","","",7,N],[11,"poll_ready","tower_util::option","",10,[[["self"]],["poll"]]],[11,"call","","",10,N],[11,"poll_ready","tower_util","",11,[[["self"]],["poll"]]],[11,"call","","",11,N]],"paths":[[3,"BoxService"],[3,"UnsyncBoxService"],[4,"EitherService"],[3,"AndThen"],[3,"CallAll"],[3,"Map"],[3,"MapErr"],[3,"Then"],[8,"ServiceExt"],[4,"Error"],[3,"OptionService"],[3,"ServiceFn"],[8,"MakeConnection"],[8,"MakeService"],[3,"Apply"],[3,"FromErr"],[3,"Oneshot"],[3,"Ready"],[3,"ResponseFuture"]]};
searchIndex["tower_watch"]={"doc":"","items":[[3,"WatchService","tower_watch","A Service that re-binds an inner Service each time a Watch…",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","",N,N],[13,"Inner","","",0,N],[13,"WatchError","","",0,N],[8,"Bind","","Binds new instances of a Service with a borrowed reference…",N,N],[16,"Service","","",1,N],[10,"bind","","",1,N],[11,"new","","Creates a new WatchService, bound from the initial value…",2,[[["watch"],["b"]],["watchservice"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N]],"paths":[[4,"Error"],[8,"Bind"],[3,"WatchService"],[3,"ResponseFuture"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
